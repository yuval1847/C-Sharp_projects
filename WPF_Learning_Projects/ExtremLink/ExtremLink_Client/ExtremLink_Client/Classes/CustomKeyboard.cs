using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;


namespace ExtremLink_Client.Classes
{
    enum KeyboardCommands
    {
        CommandLess,
        KeyPress
    }

    public sealed class CustomKeyboard
    {
        /*
        A class which represents a keyboard object.
        The class designed according to the 'Singleton' design pattern.
        */

        // Win API libraries
        // Import the SendInput function from user32.dll
        [DllImport("user32.dll", SetLastError = true)]
        private static extern uint SendInput(uint nInputs, INPUT[] pInputs, int cbSize);

        // Define the MOUSEINPUT structure
        [StructLayout(LayoutKind.Sequential)]
        public struct MOUSEINPUT
        {
            public int dx;          // The absolute position of the mouse or the amount of motion since the last mouse event.
            public int dy;          // The absolute position of the mouse or the amount of motion since the last mouse event.
            public int mouseData;   // Additional data for mouse wheel events or X button events.
            public uint dwFlags;    // Flags that specify various aspects of mouse motion and button clicks.
            public uint time;       // The time stamp for the event, in milliseconds.
            public IntPtr dwExtraInfo; // Additional information associated with the event.
        }

        // Define the INPUT structure
        [StructLayout(LayoutKind.Sequential)]
        private struct INPUT
        {
            public uint Type;
            public InputUnion Data;
        }

        // Define the HARDWAREINPUT structure
        [StructLayout(LayoutKind.Sequential)]
        public struct HARDWAREINPUT
        {
            public uint uMsg;      // The message generated by the input hardware.
            public ushort wParamL; // The low-order word of the message parameter.
            public ushort wParamH; // The high-order word of the message parameter.
        }


        // Define the InputUnion structure
        [StructLayout(LayoutKind.Explicit)]
        private struct InputUnion
        {
            [FieldOffset(0)] public MOUSEINPUT Mouse;
            [FieldOffset(0)] public KEYBDINPUT Keyboard;
            [FieldOffset(0)] public HARDWAREINPUT Hardware;
        }

        // Define the KEYBDINPUT structure
        [StructLayout(LayoutKind.Sequential)]
        private struct KEYBDINPUT
        {
            public ushort Vk;
            public ushort Scan;
            public uint Flags;
            public uint Time;
            public IntPtr ExtraInfo;
        }

        // Define constants for the INPUT structure
        private const int INPUT_KEYBOARD = 1;
        private const uint KEYEVENTF_KEYDOWN = 0x0000;
        private const uint KEYEVENTF_KEYUP = 0x0002;


        // Attirbutes:
        // A KeyboardCommands type parameter which represent the status of the keyboard.
        private KeyboardCommands currentKeyboardCommand;
        public KeyboardCommands CurrentKeyboardCommand
        {
            get { return this.currentKeyboardCommand; } 
            set { this.currentKeyboardCommand = value; }
        }

        // A Key type parameter which represent the pressed key.
        private Key currentKey;
        public Key CurrentKey
        {
            get { return this.currentKey; }
            set { this.currentKey = value; }
        }

        // Singleton behavior
        private static CustomKeyboard customKeyboardInstance = null;
        public static CustomKeyboard CustomKeyboardInstance
        {
            get
            {
                if (customKeyboardInstance == null)
                {
                    customKeyboardInstance = new CustomKeyboard();
                }
                return customKeyboardInstance;
            }
        }

        
        // Constractor
        public CustomKeyboard()
        {
            this.currentKeyboardCommand = KeyboardCommands.CommandLess;
            this.currentKey = Key.None;
        }

        // Functions:

        // A function which presses on the given key.
        public void PressKey(Key keyToPress )
        {
            // Input: A Key type parameter which should be pressed.
            // Output: The function simulate a pressing on the given keyboard key.

            // Convert the Key enum to a virtual key code
            ushort virtualKey = (ushort)KeyInterop.VirtualKeyFromKey(keyToPress);

            // Create the INPUT structure for the key press
            INPUT[] inputs = new INPUT[1];
            inputs[0].Type = INPUT_KEYBOARD;
            inputs[0].Data.Keyboard.Vk = virtualKey;
            inputs[0].Data.Keyboard.Scan = 0;
            inputs[0].Data.Keyboard.Flags = KEYEVENTF_KEYDOWN;
            inputs[0].Data.Keyboard.Time = 0;
            inputs[0].Data.Keyboard.ExtraInfo = IntPtr.Zero;

            // Send the key press event
            SendInput(1, inputs, Marshal.SizeOf(typeof(INPUT)));

            // Create the INPUT structure for the key release
            inputs[0].Data.Keyboard.Flags = KEYEVENTF_KEYUP;

            // Send the key release event
            SendInput(1, inputs, Marshal.SizeOf(typeof(INPUT)));
        }


        // A function which execute the current keyboard command.
        public void ExecuteCurrentKeyboardCommand()
        {
            // Input: Nothing.
            // Output: The function excutes a pressing on a keyboard key according to the parameter current key.
            if (this.currentKeyboardCommand != KeyboardCommands.CommandLess)
            {
                this.PressKey(this.currentKey);
                this.currentKey = Key.None;
                this.currentKeyboardCommand = KeyboardCommands.CommandLess;
            }
        }
    }
}
